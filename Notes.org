#+OPTIONS: toc:nil

* Setup, Installation, etc.
** Installation
npx react-native init AwesomeProject
** Run Program
This is the best approach.
- ~npm run ios~ which translates to ~react-native run-ios --simulator="iPhone 8"~
Here's an alternate approach, that opens ~xode~, allowing you to test on different iPhones:
- ~cd AwesomeProject && npm start~
- open new terminal tab and run ~xed -b ios~
- pick your favorit iPhone and press the ~play~ button in xCode.
** Exit Program
- ~Ctrl-c~ in metro transport terminal window.
- Or, when using ~xcode~ app, press the stop button.  This shuts down the metro processes automatically.  Don't kill the metro process before stopping ~xcode~.  If you do then see Item 2 in *Problems*
** 3rd party packages
When you add a 3rd Party library to your package (e.g., react-native-vector-icons).  Do the following:
- ~npm install --save name_of_library~
Note that automatic linking is supported starting in ~React Native 0.60~ and higher, so no need for ~react-native link~ anymore.
if its a native module, you'll need the extra step for ios:
- ~cd ios~
- ~pod install~

You can run ~git status~ to see if the iOS and Android project folders have changed. When in doubt, check the npm package page *(e.g., https://www.npmjs.com/package/react-native-vector-icons)
** Upgrading to new react-native
- ~react-native upgrade --legacy true~.  Note you can also use this to restore the ~ios~ and ~android~ folders.
To clean a build and clear the cache as well ~watchman watch-del-all && rm -rf $TMPDIR/react-* && rm -rf node_modules/ && npm cache verify && npm install && npm start -- --reset-cache~
** Resources
- [[https://cocoapods.org/][cocopods.org]]
** Problems
1. If you accidently shutdown metro before stopping xcode. Then run: ~ps aux | grep node~ then ~kill -9 xx~ where ~xx~ are the processes related to react-native.
2. If unable to resolve a module, and you're sure the module exists:
- Clear watchman watches: watchman watch-del-all
- Delete node_modules: rm -rf node_modules and run yarn install
- Reset Metro's cache: npm start -- --reset-cache
- Remove the cache: rm -rf /tmp/metro-*
3. If the xcode project doesn't build
- If you're missing files ~*.h~ etc. then make sure that the pods have been installed. ~cd ios && pod install~

* Tutorials
** tut10
Imports using absolute paths
- add a ~package.json~ file to your src folders and add the name the folder.
- for example, in your components folder, in the ~package.json~ file, add the line ~{"name": "components"}~
** tut16
This is a nice pattern. It allocates an array whose size is the number of rating stars.  Then, we map through the array, rendering a star when the array index is less than the floor(rating).  When the index is greater, then render a half star.

#+BEGIN_SRC javascript
const Stars = ({rating}) => {
  const stars = [...Array(Math.ceil(rating))];
  const fullStars = Math.floor(rating);
  return (
    <View style={{flexDirection: 'row'}}>
      {stars.map((_, i) => {
        const name = fullStars > i ? 'star' : 'star-half';
        return <Icon key={i} name={name} color="#FFD64C" />;
      })}
    </View>
  );
};

#+END_SRC

I kept getting "Unrecognized font family 'FontAwesome" in the simulator.  Apparently this has to do with react-native-vectors [[https://github.com/oblador/react-native-vector-icons/issues/1041][not support autolinking]] yet.  Fortunately, there is a manual [[https://stackoverflow.com/questions/56985307/react-native-vector-icon-not-working-on-current-version-0-60][solution]] on stackoverflow.  Also, look [[https://github.com/oblador/react-native-vector-icons/issues/1035][here]] for further detail.
** tut17
Major changes to the code due to recent verions of react native and react navigation.  See [[https://reactnavigation.org/docs/en/getting-started.html][react navigation getting started]] to learn what modules need to be installed.
Also, look at [[https://reactnavigation.org/docs/en/hello-react-navigation.html][Hello React Navigation]].


Note [[https://reactnavigation.org/docs/en/headers.html][React Navigation]] assumes you're using Class Components; for example using ~stattic navigationOtpions~ to set the title, styles, of the header bar.  The solution here, avoiding the requirement for Class Components is to use assign the ~navigationOptions~ property to the function:

#+BEGIN_SRC javascript
  RestaurantList.navigationOptions = {header: null};
#+END_SRC

JavaScript treats functions as first-class objects, so being an object, you can assign properties to a function.  See [[https://stackoverflow.com/questions/1535631/static-variables-in-javascript/45863870][stack overflow]] for more information on static variables in JavaScript.
** tut20
~react-navigation~ has changed a lot since this video, so be sure to add the module ~react-navigation-tabs~, and ~import {createBottomTabNavigator} from 'react-navigation-tabs'~
** tut22
Getting a deprecation warning ~-[RCTRootView cancelTouches]` is deprecated and will be deleted soon~.  This appears to have been filed as a [[https://github.com/facebook/react-native/issues/26707][bug]].
** tut23
Here's a good use of ~useEffect~:

#+BEGIN_SRC javascript
  useEffect(() => {
    return () => {
      setReview({...review, ['submitting']: false});
    };
  }, []);
#+END_SRC

During submittion, the submit button is disabled so that the user doesn't press more than one.  When the component unmounts, this cleanup function is run to ensure that the submit button will be enabled once again.  Probably not necessary given that the ~review~ object is set to its defaults each time the ~AddReview~ component is mounted. But it helped me to better understand ~useEffect~, and I don't need to ~setReview({...review, ['submitting']: false});~ during the ~fetch~.
** tut24
- Another change to react-native: ~Warning: AsyncStorage has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/async-storage' instead of 'react-native'~. See https://github.com/react-native-community/react-native-async-storage I went ahead and updated my code to reflect this change.
- -[RCTRootView cancelTouches]` is deprecated and will be deleted soon. I'm watching this [[https://github.com/kmagiera/react-native-gesture-handler/issues/746][issue]].  For now, I added the following code to ~ReviewApp.js~:

#+BEGIN_SRC javascript
  YellowBox.ignoreWarnings([
    'RCTRootView cancelTouches', // https://github.com/kmagiera/react-native-gesture-handler/issues/746
  ]);
#+END_SRC

!! You have to put this code in the Component where the warning is raised.

-- Sad that ~setReviewerName();~ can't be put in the cleanup function in ~useEffect~ because, by the time the Component is dismounting, the ~review~ object is reset to the default state? I need to look into this further.
** tut25
I could not get this to work, because in xcode I don't have a ~launch source image~ dropdown.  Is this something Apple has done away with in xcode 11?  I'm still investigating.
** tut26
Skipping Android for now
** tut27
